version: "3.9"  # Specify Docker Compose version


## Clarifications and Minor Additions:

## docker-compose.yml - Mounting Input/Output: The volumes section in the docker-compose.yml file should mount volumes for both input and output, making it easier to access input PDFs and retrieve generated LaTeX files. The previous response showed this, but it's very important:

## volumes:
##      - ./input:/app/input:ro  # Mount input directory (read-only)
##      - ./output:/app/output # Mount output directory

services:
  neo4j:
    image: neo4j:latest
    ports:
      - "7474:7474"  # Browser access
      - "7687:7687"  # Bolt protocol
    volumes:
      - neo4j_data:/data  # Persistent data storage
    environment:
      NEO4J_AUTH: neo4j/password  # Set Neo4j credentials

  pinecone:
    image: pinecone/pinecone:latest #  (Placeholder - Pinecone typically deployed in the cloud)
    ports:
      - "9000:9000" # Example port, may differ
    # ... (Pinecone configuration - environment variables, etc.) ...


  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password

  nlp_service:  # Example NLP service - can be split further into sub-services if needed
    build: ./nlp  # Path to Dockerfile for NLP service
    ports:
      - "8000:8000" # Example - can be omitted if internal only
    volumes: 
       - ./nlp:/app
    depends_on:
      - neo4j # Ensure Neo4j is running first for NLP to connect

  gp_engine:
    build: ./gp_engine
    volumes:
      - ./gp_engine:/app
    depends_on:
      - neo4j
      - pinecone
      - postgres
      - nlp_service


  robustness_module:
    build: ./robustness_module
    volumes:
      - ./robustness_module:/app
    depends_on:
      - neo4j
      - pinecone
      - postgres
      - gp_engine
      - static_analysis
      - dynamic_analysis

  static_analysis:
    build: ./static_analysis
    volumes: 
       - ./static_analysis:/app

  dynamic_analysis:
    build: ./dynamic_analysis
    volumes: 
       - ./dynamic_analysis:/app

  airflow:
    image: apache/airflow:latest
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags  # For Airflow workflows
      - airflow_db:/var/lib/airflow
    depends_on: 
       - postgres # Airflow metadata database
       - gp_engine
       - robustness_module

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    ports:
      - "5432:5432"  # Map PostgreSQL port
    volumes:
      - pgdata:/var/lib/postgresql/data  # For data persistence

  neo4j:
    build:
      context: .
      dockerfile: Dockerfile.neo4j
    ports:
      - "7474:7474"  # Map Neo4j HTTP port
      - "7687:7687"  # Map Neo4j Bolt port
    volumes: 
       - neo4j_data:/data # For data persistence.  remove or comment this out if you don't need persistance (e.g. for testing)

  app:
    build:
      context: .
      dockerfile: Dockerfile.app
    depends_on:  # Ensure databases are running first
      - postgres
      - neo4j
    environment:
      - PG_CONN_STR=postgresql://your_postgres_user:your_postgres_password@postgres:5432/pdf_to_latex_db # Inject DB creds
      - NEO4J_URI=bolt://your_neo4j_user:your_neo4j_password@neo4j:7687 # Inject Neo4j creds
    volumes:  # Mount a volume for input and output files
      - ./input:/app/input:ro # ro = read only mount
      - ./output:/app/output

volumes:
  neo4j_data:
  postgres_data:
  airflow_db:
  pgdata:
  neo4j_data:
